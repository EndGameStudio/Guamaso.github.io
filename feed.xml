<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Juan's Dev Journal</title>
    <atom:link href="http://guamaso.github.io//feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://guamaso.github.io/</link>
    <description>Dev journal, snippets, and rants.</description>
    <pubDate>Sun, 08 Jun 2014 20:31:00 -0400</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Publishing Wintersmith with Gulp - Version 1</title>
      <link>http://guamaso.github.io//articles/publishing-with-gulp-and-wintersmith/</link>
      <pubDate>Sun, 08 Jun 2014 20:31:00 -0400</pubDate>
      <guid isPermaLink="true">http://guamaso.github.io//articles/publishing-with-gulp-and-wintersmith/</guid>
      <author></author>
      <description>&lt;p&gt;Unfortunately, I didn’t get all of my must-have items but I was able to get most of them.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/Guamaso/a8717f5085c0728f91c0.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The Gulpfile does all of my bare minimum tasks except for one thing - committing and pushing to the github pages repository.  Since I have my versioning split into three different repos and the gulp-git module assumes that the location of the gulpfile &lt;em&gt;is&lt;/em&gt; the repository home (I think…), it fails since I don’t have a repo there.&lt;/p&gt;
&lt;p&gt;I was hoping to change the current working directory to the actual repo folder but I’m not sure how or if this is possible.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;rename&lt;/code&gt; module is a life savor for working with Wintersmith. Moving articles from my &lt;code&gt;articles&lt;/code&gt; folder to the &lt;code&gt;wintersmith&lt;/code&gt; folder was easier than I originally thought.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;run-Wintersmith&lt;/code&gt; module was a bit tricky. I’m not certain why but npm was erroring out during install.  I added &lt;code&gt;wintersmith&lt;/code&gt; as a dependency to my gulpfile and copied the &lt;code&gt;index.js&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt; files manually to the incomplete folder within &lt;code&gt;node-modules&lt;/code&gt;. It’s a hack but it works; I can successfully run &lt;code&gt;wintersmith.build()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The very next step is to get git working. Right after that is spell checking. Later on, I’d like to add better handling of the articles.  &lt;/p&gt;
&lt;p&gt;My &lt;code&gt;articles/published&lt;/code&gt; folder should always win. In other words, the &lt;code&gt;wintersmith/content/articles&lt;/code&gt; folder should match only what is in the published files and nothing more. During testing, a draft article snuck in my wintersmith folder even though it wasn’t in my published folder. This should be rare once I’m done testing but I’d still like to catch it instead of having a draft article get published.&lt;/p&gt;
&lt;p&gt;Until then, I am currently running git commands manually. This isn’t &lt;em&gt;that&lt;/em&gt; big of a deal as my main purpose was to have an article structure that could be managed easily.  &lt;/p&gt;
&lt;p&gt;Wintersmith kind of kills me in that I can’t group articles in a folder. I wanted to have articles grouped by year, for example.  So, a blog post from 2013 would show up as &lt;code&gt;domain.com/2013/my-blog-post/&lt;/code&gt;. If it can do this, I have not found how.  Wintersmith does not support drafts - which actually makes sense, I’m just surprised I haven’t seen many solutions for this.&lt;/p&gt;
&lt;p&gt;Either way, the script provides about 70% of what I set out to do, so I’d call this a solid and productive day.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Learning Gulp, Wintersmith tasks</title>
      <link>http://guamaso.github.io//articles/learning-gulp/</link>
      <pubDate>Sun, 08 Jun 2014 13:20:00 -0400</pubDate>
      <guid isPermaLink="true">http://guamaso.github.io//articles/learning-gulp/</guid>
      <author></author>
      <description>&lt;p&gt;I like command line but as a consumer of some products, I prefer a GUI. Automated tasks runners like Grunt and Gulp, in my opinion should have a GUI for consumers (read: developers). I’ve seen some early work and attempts but nothing very usable. So, here I am learning one of them because, through all my complaining, I &lt;em&gt;do&lt;/em&gt; need to learn them.
&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I like learning a new thing by implementing it in something I am already working on.  I figured automating some of my dev journal workflow made sense. Since Wintersmith doesn’t really &lt;em&gt;do&lt;/em&gt; drafts, I figured Gulp could help out a bit.  So, I worked out the tasks that I &lt;em&gt;think&lt;/em&gt; I need in order to make publish easier via Github Pages and Wintersmith.  &lt;/p&gt;
&lt;p&gt;Not all the steps are required right now, like testing each published article for example.  In fact, some of these steps I’d like to wrap as a plugin. But that’s for later.&lt;/p&gt;
&lt;p&gt;I started out with the following file structure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dev_journal - root&lt;ul&gt;
&lt;li&gt;articles - holds markdown articles&lt;ul&gt;
&lt;li&gt;drafts&lt;/li&gt;
&lt;li&gt;scheduled&lt;/li&gt;
&lt;li&gt;published&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;github_pages - “production”&lt;/li&gt;
&lt;li&gt;wintersmith - holds published articles and template&lt;ul&gt;
&lt;li&gt;build&lt;/li&gt;
&lt;li&gt;template&lt;/li&gt;
&lt;li&gt;content&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are three git repos, one for the root &lt;code&gt;articles&lt;/code&gt; folder, one for the &lt;code&gt;wintersmith\template&lt;/code&gt; folder, and one for the &lt;code&gt;github_pages&lt;/code&gt; folder.  I could probably consolidate these down to two, maybe even one repo but I’m doing this in baby steps. :)  All of the gulp and package files live in root.&lt;/p&gt;
&lt;p&gt;The tasks are written out with every step I &lt;strong&gt;want&lt;/strong&gt; in my workflow. But I don’t have the time to learn and get all of it working so I’m focusing on the moving of files first. I will fine tune and improve as I go along.&lt;/p&gt;
&lt;h2 id=&quot;gulp-task-process-drafts&quot;&gt;Gulp Task: Process Drafts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Grab all files from &lt;code&gt;articles/drafts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Check spelling and grammar.  Do not continue processing file if errors exist but save a copy of it to &lt;code&gt;articles/drafts&lt;/code&gt; with spelling/grammar suggestions.&lt;/li&gt;
&lt;li&gt;Check metadata of file. Wintersmith has the metadata header which has a few required fields. Do not continue processing file if errors exist.&lt;/li&gt;
&lt;li&gt;Move remaining files to &lt;code&gt;articles/scheduled&lt;/code&gt; folder.  If the header is filled out then it’s ready to be published.&lt;/li&gt;
&lt;li&gt;Commit changes to the &lt;code&gt;articles&lt;/code&gt; folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;gulp-task-process-scheduled-articles&quot;&gt;Gulp Task: Process Scheduled Articles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Grab all files from &lt;code&gt;artciles/scheduled&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Spellcheck each file.  Create a copy of any file with errors. Move original and copy to &lt;code&gt;articles/drafts&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Create folders in &lt;code&gt;wintersmith/content/articles&lt;/code&gt; based on file names of each markdown file.&lt;/li&gt;
&lt;li&gt;Copy each file into its respective folder.&lt;/li&gt;
&lt;li&gt;Rename each file to “index.md”&lt;/li&gt;
&lt;li&gt;Run wintersmith build, verify no errors.&lt;/li&gt;
&lt;li&gt;Commit changes to the &lt;code&gt;articles&lt;/code&gt; folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;gulp-task-publish-to-github-pages&quot;&gt;Gulp Task: Publish to Github Pages&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Clear github pages folder (except .git)&lt;/li&gt;
&lt;li&gt;Copy wintersmith/build folder to github pages folder. &lt;/li&gt;
&lt;li&gt;Commit changes to &lt;code&gt;github_pages&lt;/code&gt; repo.&lt;/li&gt;
&lt;li&gt;Push changes to GitHub.&lt;/li&gt;
&lt;li&gt;Wait a few moments (for github pages to update). Maybe this can be a separate task?&lt;/li&gt;
&lt;li&gt;Check each article to make sure it exists at url and that content is correct.&lt;/li&gt;
&lt;li&gt;Move scheduled files to the published folder, if they were indeed published.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Week Notes</title>
      <link>http://guamaso.github.io//articles/weeknotes-2014-01/</link>
      <pubDate>Fri, 06 Jun 2014 15:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://guamaso.github.io//articles/weeknotes-2014-01/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;strong&gt;Week Notes #1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Week notes are a great cross between journaling and blogging. The goal of keeping yourself accountable to the interwebz and, more importantly, yourself, is a good goal to shoot for.&lt;/p&gt;
&lt;p&gt;There is a lot to learn in the world of web development; always something new coming out.  I have a Trello board listing all the applications, frameworks, languages, and tools that I need to, at the very least, become familiar with.&lt;/p&gt;
&lt;p&gt;This week I focused on getting caught up with some other articles/posts as well as keeping up with work tasks. Not a whole lot of time spent on learning new things or practicing existing skills (outside of work, anyway).  &lt;/p&gt;
&lt;p&gt;We are switching over to Wakanda at work and I’m looking to see how I can use things like Grunt/Gulp, SASS, or CoffeeScript with it.  The application is fairly robust and flexible… ish.  I was able to get Foundation working with it some time ago, as well as Mustache.  I even used CoffeeScript for a module script I had to write.  I’m just not sure how to fit in these tools seemlessly with the built in server. It will probably require a custom plugin.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Blocking Right Click Is Just Bad</title>
      <link>http://guamaso.github.io//articles/right-click-blocking-is-bad/</link>
      <pubDate>Thu, 24 Apr 2014 15:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://guamaso.github.io//articles/right-click-blocking-is-bad/</guid>
      <author></author>
      <description>&lt;p&gt;My uncle’s family owns their own successful restaurant back in California. Really great Mexican food. Most dishes are authentic to the area they are from back in Mexico. Other dishes are hybrids to cater to different tastes but it’s all good grub!&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Anyway, every now and then, I’ll look at websites of people I know and look for stuff to mock and cajole.  By mock and cajole, I mean to say, analyze and learn what NOT to do.&lt;/p&gt;
&lt;p&gt;The exciting part is to see their site using a more mobile first approach. The site is responsive, albeit a little clunky.  Even the obvious stock photography isn’t that bad. &lt;/p&gt;
&lt;p&gt;I was impressed. So, here I go to try and look up the agency that created the site. I scroll to the footer, find the typical “Designed by” link and right click on it when suddenly… BOOM. Browser alert message.&lt;/p&gt;
&lt;p&gt;Here’s what it says: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;XXXXX does not allow you to copy or extract any information and/or images from this website.**PLEASE DO NOT TRY THIS ACTION AGAIN**&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I personally know the owners and even I felt a little miffed by the assumption that I was going to steal their horrible stock photos… or the photos of my Uncle with his hugantic cheezer. &lt;/p&gt;
&lt;p&gt;Here’s the deal, most users don’t want to steal. Most users might want to print the page using right click. Or, in my case, open a link in new tab.  Maybe they want to copy your phone number to the clipboard to save into some phone book application.  There are a number of use cases that require the right click which means that by disabling it with a blatantly rude message results in a poor experience for your site and, in turn, your brand.&lt;/p&gt;
&lt;p&gt;“What about the people that &lt;em&gt;do&lt;/em&gt; want to steal my stuff?” Try this: Hold down CTRL+S. You just stole your stuff. Are you going to block the CTRL key now too? Are you aware that I can disrupt the code that blocks the right click?&lt;/p&gt;
&lt;p&gt;You need to understand how the internet works. The browser is receiving files from the internet, specifically a computer somewhere that holds your site. These files are delivered and the connection between the browser and the server is closed. Guess what? Those files now exist on the person’s computer. The user didn’t need to right click to steal them; they’re already there! &lt;/p&gt;
&lt;p&gt;People that want to steal photos of my Uncle holding an awesome plate of seafood with the restaurant logo underneath are going to steal it. There is nothing you can do.&lt;/p&gt;
&lt;p&gt;What you are doing, though, is creating a bad experience for the legit people.&lt;/p&gt;
&lt;h2 id=&quot;final-notes&quot;&gt;Final Notes&lt;/h2&gt;
&lt;p&gt;After reviewing the code that handles the alert, I found this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(closeWin==&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;) self.close();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If &lt;code&gt;closeWin&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt;, the tab will close. WOW. You have just fired your customer before they became your customer. You essentially threw away money. Bravo.&lt;/p&gt;
&lt;p&gt;Here’s the &lt;a href=&quot;https://gist.github.com/Guamaso/11240273&quot;&gt;whole script&lt;/a&gt; I mined out of the site. It seems like it is a snippet grabbed from someone else, otherwise I wouldn’t use it without permission.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Hello World!</title>
      <link>http://guamaso.github.io//articles/helloworld/</link>
      <pubDate>Wed, 23 Apr 2014 15:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://guamaso.github.io//articles/helloworld/</guid>
      <author></author>
      <description>&lt;p&gt;I like Ruby in the same way that I like craft/micro beers. I actually don’t like beer, but I like the idea that there is a growing trend for something better than your mass produced, corn syrup sweetened, GMO wheat fermentation. Ruby’s great… but I’m more of a hard cider guy. &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;So, I thought I’d try using Wintersmith with Github Pages.&lt;/p&gt;
&lt;p&gt;And look at that… works pretty good! :D&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>